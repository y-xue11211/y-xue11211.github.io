<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>sql语句</title>
      <link href="/2019/02/25/sql%E8%AF%AD%E5%8F%A5/"/>
      <url>/2019/02/25/sql%E8%AF%AD%E5%8F%A5/</url>
      
        <content type="html"><![CDATA[<h1 id="SQL语法"><a href="#SQL语法" class="headerlink" title="SQL语法"></a>SQL语法</h1><p>DDL(数据定义语言)<br>DML(数据操作语言）<br>DCL(数据控制语言)<br>注意: SQL中大小写不敏感（大写和小写是一样的）; 每条SQL语句必须以分号结束;</p><h2 id="一-DDL-主要提供数据库和表的创建、删除和修改"><a href="#一-DDL-主要提供数据库和表的创建、删除和修改" class="headerlink" title="一.DDL - 主要提供数据库和表的创建、删除和修改"></a>一.DDL - 主要提供数据库和表的创建、删除和修改</h2><ol><li>删除数据库: drop database 数据库名;<br><code>DROP DATABASE school;</code>   – 直接删除指定数据库;<br><code>DROP DATABASE if EXISTS school;</code>   – 如果指定的数据库存在就删除数据库</li><li>创建数据库: create database 数据库名;<br><code>create database school;</code>  – 直接创建指定数据库;<br><code>CREATE database if not EXISTS school;</code>  – 当指定数据库不存在的时候才创建数据库;<br><code>create database if not EXISTS school default charset utf8;</code>   – 创建数据库的时候设置字符集编码方式为utf8,让数据库支持中文数据的存储;</li><li>使用/切换数据库: use 数据库名;<br><code>use school;</code></li><li>新建表<br>A.常规表： create table if not exists 表名(字段名1 类型1, 字段2 类型2,…);<br>常用数据类型: int-整数, char(size)-定长字符串, varchar(size)-不定长字符串, text-字符串, bit-布尔, date-日期;<br>注意：<br>a. 表名一般需要加前缀’t’或者’tb’;<br>b.字段用来确定表中要存储哪些数据，字段名随便命名但是不能是关键字;<br>c.数据类型必须是MySQL支持的数据类型;<br><code>CREATE TABLE if not EXISTS t_student(stuid int, stuname varchar(20), gender bit, birth date);</code><br>B.新建表并且添加约束: create table if not exists 表名(字段名1 类型1 约束1, 字段2 类型2 约束2,…);<br>常见约束: not null - 不为空,  default  - 设置默认值,  unique - 值唯一,  primary key - 主键约束;<br>主键约束:  主键的值可以确定列表中唯一一条记录(通过一个主键值可以找到表中的唯一一条记录);<br>注意: auto_increment只针对主键有效,并且主键的类型是整型;<pre><code>CREATE TABLE if not EXISTS t_student(stuid int not null auto_increment, stuname varchar(20) not null, gender bit DEFAULT 1, birth date,PRIMARY KEY(stuid)  -- 将字段stuid作为当前表的主键（设置主键可以间接约束这个字段的值是唯一的）);</code></pre></li><li>删除表: DROP TABLE if EXISTS 表名;<br><code>DROP TABLE if EXISTS t_student;</code><br>清空表中的数据: TRUNCATE TABLE 表名;<br><code>TRUNCATE TABLE t_student;</code></li><li>修改表<br>6.1 添加列: alter TABLE 表名 add COLUMN 字段名 字段类型 约束;<br><code>alter TABLE t_student add COLUMN score FLOAT(8,2) DEFAULT 0;</code><br>6.2 删除列: alter TABLE 表名 drop COLUMN 字段名;<br><code>alter TABLE t_student drop COLUMN gender;</code></li></ol><h2 id="二、DML-数据操作语言-主要针对数据库中数据的增、删、改、查"><a href="#二、DML-数据操作语言-主要针对数据库中数据的增、删、改、查" class="headerlink" title="二、DML(数据操作语言) - 主要针对数据库中数据的增、删、改、查"></a>二、DML(数据操作语言) - 主要针对数据库中数据的增、删、改、查</h2><ol><li><p>增(添加数据/记录)<br>1.1插入数据/记录: insert into 表名 values(值1, 值2, 值3,….)  - 依次给指定表中的字段赋值;<br><code>INSERT into t_student VALUES(100, &#39;张三&#39;, 0, &#39;2019-9-23&#39;);</code><br>1.2插入数据/记录: insert into 表名(字段名1,字段名2,…) values(值1, 值2,…) -以指定的顺序给指定的字段赋值;<br><code>INSERT into t_student(stuname, birth) VALUES(&quot;小花&quot;, date(now()));   -- 一次插入一条记录</code><br>一次插入多条记录</p><pre><code>INSERT into t_student(stuname, birth) VALUES(&quot;小花&quot;, date(now())),(&#39;小明&#39;, &#39;2018-9-8&#39;),(&#39;路飞&#39;, &#39;1999-12-16&#39;),(&#39;佐助&#39;, &#39;2000-10-12&#39;);</code></pre><p><strong>值的问题: sql中是数字对应的值直接写，字符串需要使用引号引起来，bit类型的值只有0或者1, 时间可以用内容是满足时间格式字符串也可以是通过时间函数获取的值;<br></strong>常见时间函数: now() - 当前时间  date(now()) - 当前日期   year(now()) - 当前年   month(now()) - 当前月 </p></li><li><p>删（删除数据/记录）<br>delete from 表名;    - 删除指定表中所有记录<br><code>DELETE FROM t_student;</code><br>delete from 表名 where 条件语句;    - 删除满足条件的记录<br>SQL中的条件语句: =(判断是否相等), &lt;&gt;(不等于,和python中的!=功能一样), &gt;, &lt;, &gt;=, &lt;=</p><pre><code>DELETE FROM t_student WHERE stuid=100;     -- 删除t_student表中stuid的值等于100的记录  DELETE FROM t_student WHERE stuname=&#39;小花&#39;;  -- 删除t_student表中stuname的值等于&#39;小花&#39;的记录DELETE FROM t_student WHERE stuid&lt;108;   -- 删除t_student表中stuid的值小于&#39;小花&#39;的记录  </code></pre><p>3.改(修改数据/记录)<br>update 表名 set 字段1=新值1, 字段2=新值2,…;      - 将指定表中所有行的指定列/字段的值赋值为新值<br><code>UPDATE t_student set birth=&#39;1999-10-1&#39;, gender=1;</code><br>update 表名 set 字段1=新值1, 字段2=新值2,… where 条件语句;  -将表中满足条件的行中指定字段的值赋值为新值<br><code>UPDATE t_student set gender=0 WHERE stuname=&#39;小花&#39;;</code><br>通配符%: 表示任意个数的任意字符（包括0个）</p><pre><code>UPDATE t_student set birth=&#39;2000-01-01&#39; WHERE stuname LIKE &#39;小%&#39;;    -- 修改stuname是以&#39;小&#39;开头的行对应的birth的值UPDATE t_student set birth=&#39;2111-01-01&#39; WHERE stuname LIKE &#39;%小%&#39;;  </code></pre><p>通配符_: 表示一个任意字符</p><pre><code>UPDATE t_student set birth=&#39;2444-01-01&#39; WHERE stuname LIKE &#39;小_&#39;;    --  修改stuname只有两个字符，并且第一个字符是‘小’对应的行的birth的值</code></pre><p>注意: 通配符只针对字符串有效!<br>4.查(获取数据)<br>4.1直接查询<br>elect * from 表名;    - 获取指定表中所有行和所有的列(所有数据)</p><pre><code>SELECT * FROM t_student;</code></pre><p>select 字段名1,字段名2,… from 表名;   - 获取指定表中所有行指定的列 </p><pre><code>SELECT stuname,stuid FROM t_student;</code></pre><p>select * from 表名 where 条件;    - 获取指定表中所有满足条件的行所有列的数据 </p><pre><code>SELECT * FROM t_student WHERE stuid&gt;115;</code></pre><p>4.2列重命名<br>select 字段1 as 新字段1, 字段2 as 新字段2,… from 表名;<br>注意： 这儿的as可以省略<br><code>SELECT stuid as &#39;学号&#39;, stuname, gender as &#39;性别&#39; FROM t_student;    -- 对查询结果中的stuid和gender字段进行重命名</code><br>4.3对查询结果重新赋值(一般针对布尔数据)<br>select if(字段名,值1,值2) from 表名;    -查询指定字段，并且判断字段对应的值是0还是1，如果是1结果为值1，否则为值2<br>注意: 这儿的if的用法是MySQL专有的<br>MySQL写法: if(字段, 新值1, 新值2)<br><code>SELECT stuname,if(gender,&#39;男&#39;,&#39;女&#39;) as &#39;性别&#39; FROM t_student;</code><br>通用写法:  case 字段 when 值 then 新值1 else 新值2 end<br><code>SELECT case gender WHEN 1 THEN &#39;男&#39; ELSE &#39;女&#39; END as &#39;性别&#39; FROM t_student;</code><br>4.4对列进行合并<br>select concat(字段1,字段2,…) from 表名;</p><pre><code>SELECT CONCAT(stuname,stuid) as &#39;name_id&#39; FROM t_student;SELECT CONCAT(stuname,&#39;:&#39;,stuid) as &#39;name_id&#39; FROM t_student;</code></pre><p>注意: 数字和字符串数据可以合并，bit类型的数据不可以合并<br><code>SELECT CONCAT(stuname,&#39;:&#39;,gender) as &#39;name_id&#39; FROM t_student;</code><br>4.5模糊查询 - 查询的时候时候通过like条件来指定查询对象<br>sql中支持逻辑运算符and(逻辑与运算)和or(逻辑或运算)，not(逻辑非)<br><code>SELECT * FROM t_student WHERE stuname like &#39;%飞%&#39; or not stuid &lt; 110;</code><br>4.6排序(先按之前的任何语法进行查询在排序)<br>select <em> from 表名 order by 字段;      - 对查询结果按照指定字段的值进行升序排序<br>select </em> from 表名 order by 字段 asc;      - 对查询结果按照指定字段的值进行升序排序<br>select * from 表名 order by 字段 desc;      - 对查询结果按照指定字段的值进行降序排序</p><pre><code>SELECT * FROM t_student ORDER BY gender;    -- 按性别升序排序SELECT * FROM t_student ORDER BY stuid ASC;  -- 按学号升序排序SELECT * FROM t_student ORDER BY stuid DESC;  -- 按学号降序排序</code></pre><p>排序的时候可以通过在order by的后边加多个字段，进行联排。排序的时候前面的字段的优先级高些<br><code>SELECT * FROM t_student ORDER BY gender ASC, stuid DESC;   -- 先按性别进行升序排序，然后再按学号降序排序。</code><br>4.7限制<br>select * from 表名 limit N;    – 获取查询结果的前N条记录</p><pre><code>SELECT * FROM t_student LIMIT 3;   -- 获取查询结果的前3条记录</code></pre><p>select * from 表名 limit M offset N;   – 对查询结果跳过前N条数据，取M条数据出来  </p><pre><code>SELECT * FROM t_student LIMIT 3 offset 4;  -- 跳过前4数据，然后取3条数据</code></pre></li></ol>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> sql语句 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vim编辑器之神</title>
      <link href="/2019/02/23/vim%E7%BC%96%E8%BE%91%E5%99%A8%E4%B9%8B%E7%A5%9E/"/>
      <url>/2019/02/23/vim%E7%BC%96%E8%BE%91%E5%99%A8%E4%B9%8B%E7%A5%9E/</url>
      
        <content type="html"><![CDATA[<h1 id="vim编辑器之神"><a href="#vim编辑器之神" class="headerlink" title="vim编辑器之神"></a>vim编辑器之神</h1><h3 id="配置vimrc配置"><a href="#配置vimrc配置" class="headerlink" title="配置vimrc配置"></a>配置vimrc配置</h3><p>在shell中可以通过 <code>vim ~/.vimrc</code> 或者 <code>vim /etc/vimrc</code> 打开vimrc文件对vim进行配置。在这个文件中可以进行很多和vim相关的配置，常用的如下（如果对其他配置感兴趣的可以自己百度）：</p><p><img src="https://github.com/y-xue11211/iamge/blob/master/img/vim1.png?raw=true" alt> </p><h3 id="常用操作"><a href="#常用操作" class="headerlink" title="常用操作"></a>常用操作</h3><h4 id="1-模式切换"><a href="#1-模式切换" class="headerlink" title="1.模式切换"></a>1.模式切换</h4><p>我们可以将vim分为命令模式、编辑模式和末行模式三种<br><strong>命令模式：</strong>进入vim的时候vim是处于命令模式状态下的，这个时候输入内容不会出现在编辑区  (最末什么都没有)</p><p><strong>末行模式：</strong>在命令模式下输入冒号，让vim进入末行模式。在末行模式的冒号后面可以输入相关的一些指令进行相关操作  (最后有一个冒号)</p><p><strong>编辑模式：</strong>在命令模式下按’i’进入编辑模式。在编辑模式下可以对文件内容进行编辑 (最后 –INSERT– 或者 –插入–)  </p><p>####2.保存和退出<br>在末行模式下输入相应的指令可以对编辑区的内容进行保存和退出vim界面<br><strong>w</strong> – 只保存(类似快捷键ctr+s)<br><strong>q</strong> – 退出（在编辑区的内容全部都保存的情况下才有效）<br><strong>wq</strong> – 保存并退出<br><strong>q!</strong>  – 强制退出（不保存修改信息）    </p><p>####3.光标操作<br>以下光标操作都是在命令模式下输入的<br><strong>^(shift+6)</strong>  – 移动到行首<br><strong>$(shift+4)</strong>  – 移动到行尾<br><strong>G(shift+g)</strong>    – 移动到文件末尾<br><strong>行号G</strong>            – 移动到指定行,例如:30G, 让光标直接跳转到行号是30的那一行<br><strong>gg</strong>                – 移动到文件开头  </p><p>####4.文本操作<br>以下操作不带冒号的是在命令模式下输入，前面有冒号代码后面的内容是在末行模式下输入<br><strong>dd</strong>            – 删除光标所在的行<br><strong>数字dd</strong>        – 从光标所在行开始往后面开始删，删除指定数量行内容<br><strong>:%d</strong>        – 删除所有     </p><p><strong>yy</strong>         – 复制光标所在的行<br><strong>数字yy</strong>        – 从光标所在行开始复制指定行数的内容<br><strong>p</strong>            – 将复制的内容粘贴到光标所在的位置<br><strong>u</strong>            – 撤销<br><strong>ctr+r</strong>    – 反撤销    </p><p><strong>:%!sort</strong>  – 对内容排序  </p><p><strong>:/查找对象[/gice]</strong>    – 搜索匹配正则表达式的内容，按回车回到命令模式后按n往前查找，按N往后查找  </p><p>1,$s/被替换对象/替换内容[/gice<em>]</em>    – 将正则表达式匹配到的内容替换成指定内容<br>&emsp;&emsp;-    g: 全局匹配<br>&emsp;&emsp;-     i: 忽略大小写 <br><br>&emsp;&emsp;-   c: 替换时需要提示<br>&emsp;&emsp;-   e: 忽略错误  </p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vim编辑器之神 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nginx服务器</title>
      <link href="/2019/02/23/Nginx%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%AE%89%E8%A3%85/"/>
      <url>/2019/02/23/Nginx%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%AE%89%E8%A3%85/</url>
      
        <content type="html"><![CDATA[<h1 id="Nginx服务器"><a href="#Nginx服务器" class="headerlink" title="Nginx服务器"></a>Nginx服务器</h1><h3 id="1-阿里云添加80端口"><a href="#1-阿里云添加80端口" class="headerlink" title="1.阿里云添加80端口"></a>1.阿里云添加80端口</h3><p>阿里云上默认只有一个22端口用来做远程登录，如果希望在阿里云上安装支持http请求的nginx服务器，需要给阿里云添加80端口</p><p><img src="https://github.com/y-xue11211/iamge/blob/master/img/aliyun0.png?raw=true" alt><br><img src="https://github.com/y-xue11211/iamge/blob/master/img/aliyun2.png?raw=true" alt><br><img src="https://github.com/y-xue11211/iamge/blob/master/img/aliyun3.png?raw=true" alt><br><img src="https://github.com/y-xue11211/iamge/blob/master/img/aliyun4.png?raw=true" alt></p><h3 id="2-安装nginx"><a href="#2-安装nginx" class="headerlink" title="2. 安装nginx"></a>2. 安装nginx</h3><p>a) 添加nginx存储库  </p><pre class=" language-python"><code class="language-python">    yum install epel<span class="token operator">-</span>release</code></pre><p>b) 安装nginx</p><pre class=" language-python"><code class="language-python">    yum install nginx</code></pre><p>c) 运行nginx<br>Nginx不会自行启动。要运行Nginx  </p><pre><code>    systemctl start nginx</code></pre><p>nginx的运行命令:  </p><pre><code>    systemctl status nginx 查看nginx的状态      systemctl start/stop/enable/disable nginx 启动/关闭/设置开机启动/禁止开机启动  </code></pre><p>d) 系统启动时启动Nginx  </p><pre><code>    systemctl enable nginx</code></pre><p>e）如果您正在运行防火墙，请运行以下命令以允许HTTP和HTTPS通信：   </p><pre><code>    sudo firewall-cmd --permanent --zone=public --add-service=http     sudo firewall-cmd --permanent --zone=public --add-service=https    sudo firewall-cmd --reload</code></pre><h3 id="3-nginx目录共享配置"><a href="#3-nginx目录共享配置" class="headerlink" title="3.nginx目录共享配置"></a>3.nginx目录共享配置</h3><p>a) 在contOS目录中确定一个需要共享的文件夹，例如： /home/yuting<br>b) 打开 etc/nginx/nginx.conf 文件，设置server</p><pre><code>    #共享设置 - 在浏览器中输入服务器ip地址，会展示共享目录的文件列表    root /home/yuting;    location / {           autoindex on;           autoindex_exact_size on;           autoindex_localtime on;    }  </code></pre><p>除了可以共享文件，还可以自定义页面</p><pre><code>    #自定义服务器页面    location / {            root /home/yuting;            index index.html index.htm;    }</code></pre><p>注意： 如果出现权限问题，可以修改目录的权限  </p><h1 id="ssh密钥认证"><a href="#ssh密钥认证" class="headerlink" title="ssh密钥认证"></a>ssh密钥认证</h1><p>1.在主机和从机上执行：<code>ssh-keygen</code></p><p>2.在从机上执行:  <code>scp  id_rsa.pub  root@主机地址:~/.ssh/master.pub</code><br>(上面这条指令是将从机上的 id_rsa.pub文件拷贝传递给到主机的.ssh文件夹下，并且命名为’master.pub’)</p><p>3.在主机中的.ssh文件夹中创建authorized_keys文件： <code>touch authorized_keys</code> </p><p>4.修改文件authorized_keys的权限: <code>chmod 600  authorized_keys</code>  </p><p>5.将master.pub放进authorized_keys文件中:  <code>cat master.pub &gt;&gt;  authorized_keys</code></p><p>6.在操作主机的时候，需要主机能够自己免密访问自己就将自己的公钥放在自己的authorized_keys文件中</p>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo博客搭建 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git常用指令</title>
      <link href="/2019/02/23/git%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4/"/>
      <url>/2019/02/23/git%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h1 id="git常用指令"><a href="#git常用指令" class="headerlink" title="git常用指令"></a>git常用指令</h1><h2 id="1-基本指令"><a href="#1-基本指令" class="headerlink" title="1.基本指令"></a>1.基本指令</h2><p><code>git init</code> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ——  新建git仓库<br><code>git add 文件/文件夹</code> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ——  将文件添加到缓存区中<br><code>git add -A</code> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; — 添加所有内容到缓存区中<br><code>git stutas</code> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;———    查看git状态<br><code>git commit -m  ‘提交信息’</code>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;——  将缓存区中的内容全部提交到git本地仓库中  </p><p><code>git log</code>   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;——-    查看提交日志  </p><p><code>git reset  - - hard   HEAD</code>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;——   让工作目录中的内容和仓库中的内容保持一致<br><code>git reset  --hard HEAD^</code>   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;——  回到上一个版本<br><code>git  reset  - - hard 版本号</code>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;——  回到指定的版本<br><code>git checkout  - -  文件名</code>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ——  从暂存区中恢复工作目录中的内容(让工作区中的指定文件，回到上次提交的时候的状态)  </p><p><code>git clone &lt;url&gt;</code> - 将服务器上的项目(仓库)克隆 (使用https地址需要输入密码，使用ssh地址需要添加公钥)  </p><p><code>git remote add origin 地址</code>      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;—– 关联远程仓库(只需要关联一次)</p><p><code>git push [-u] origin master</code>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;—– 提交(-u在第一次提交分之的时候才用)  </p><h2 id="2-分之管理"><a href="#2-分之管理" class="headerlink" title="2.分之管理"></a>2.分之管理</h2><p>创建仓库会默认给我们创建一个master分之,这个分之一般作为提交和发布分之;开发一般会自己创建一个develop分之，用来开发和测试;多人协作的时候还可能根据不同的人或者(不同的功能)创建不同的分之，用来独立开发  </p><p>常见分之： master(主要是合并develop), develop(主要合并下面的其他分支), 功能/人员分之(开发)  </p><p><code>git branch [-a]</code>   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;        - 查看分之<br><code>git branch 分之名</code>        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;- 创建分之<br><code>git checkout   分支名</code>        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-   切换分之<br><code>git checkout -b 分之名</code>        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;    - 切换并创建新的分之<br><code>git diff    分之1  分之2</code>        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;- 查看两个分之之间的差异<br><code>git merge 分之名</code>            &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;- 让当前分之和指定分之进行合并     </p><p>注意: 切换分之、push、pull，这些操作前要保证工作区是clean  </p><p>怎么避免冲突：  不要发生多个分之对同一个文件在同一个版本下进行修改(和同伴确认和商量)</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git常用指令 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL配置</title>
      <link href="/2019/02/21/MySQL%E9%85%8D%E7%BD%AE/"/>
      <url>/2019/02/21/MySQL%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<p>MySQL配置  </p><ol><li><p>下载MySQL源安装包: <code>wget http://dev.mysql.com/get/mysql57-community-release-el7-8.noarch.rpm</code>  </p></li><li><p>安装MySQL源:<br><br><code>yum localinstall mysql57-community-release-el7-8.noarch.rpm</code></p></li><li><p>安装MySQL:<br><br><code>mysql:yum install mysql-community-server</code>  </p></li><li><p>设置开启启动MySQL服务:<br><br><code>systemctl enable mysqld</code>  </p></li><li>启动/重启MySQL服务：<br><br><code>systemctl restart mysqld</code></li><li>查看MySQL初始密码：<br><br><code>grep &#39;A temporary password&#39; /var/log/mysqld.log</code> </li><li>更改MySQL密码：<br><br>mysqladmin -u root -p’旧密码’ password ‘新密码’<br>这里更改密码出了问题，更改失败，这是因为密码太过简单的原因。有两个接解决方法：</li></ol><p>　　　　方法一：把密码设置复杂点（这是最直接的方法）</p><p>　　　　方法二：关闭mysql密码强度验证(validate_password)</p><p>　　　　　　　　编辑配置文件：<code>vim /etc/my.cnf</code>， 增加这么一行<code>validate_password=off</code></p><p>　　　　　　　　编辑后重启mysql服务：<code>systemctl restart mysqld</code>  　　　　　　　　  　　　　　　　　  </p><ol start="8"><li>设置mysql能够远程访问:<br>a. 登录进MySQL:  <code>mysql -uroot -p密码</code><br>b. 增加一个用户给予访问权限: <code>grant all privileges on *.* to &#39;root&#39;@&#39;ip地址&#39; identified by &#39;密码&#39; with grant option;</code><br>c. 刷新权限：<code>flush privileges;­</code>  </li></ol>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL配置 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux指令</title>
      <link href="/2019/02/20/Linux%E6%8C%87%E4%BB%A4/"/>
      <url>/2019/02/20/Linux%E6%8C%87%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<p>连接云服务器：<br>1.连接服务器: <code>ssh  root@ip地址</code><br><br>2.退出:  logout</p><p>#Linux指令系统：</p><p>命令名称 [命名参数] [命令对象]</p><h2 id="一、日常操作"><a href="#一、日常操作" class="headerlink" title="一、日常操作"></a>一、日常操作</h2><p>1.cd指令       - 进入指定文件夹<br><br>&ensp;&ensp;cd  目录     - 进入指定目录(也可以是文件夹对应的路径) ~相对路径 — 绝对路径<br>&ensp;&ensp;cd  ..       - 返回上层目录<br><br>&ensp;&ensp;cd  ~    - 回到根目录<br><br>&ensp;&ensp;cd  /    - 进入系统根目录<br></p><p>2.ls指令        - 查看当前目录中的内容<br></p><p>&ensp;&ensp;ls  -l/-lh              -  查看详情<br><br>&ensp;&ensp;ls -a           - 隐藏文件也一起显示<br><br>&ensp;&ensp;ls -R        - 递归显示所有内容<br><br>&ensp;&ensp;ls -S/-t        - 按大小/时间排序<br></p><p>3.pwd指令     - 显示当前完整目录<br></p><p>4.文件操作指令<br><br>&ensp;&ensp;touch  文件名        - 新建文件<br><br>&ensp;&ensp;cat 文件名           - 查看文件内容<br><br>&ensp;&ensp;vim/vi  文件名          -打开文件<br><br>&ensp;&ensp;rm    文件名        - 删除文件<br><br>&ensp;&ensp;rm - r 目录        - 删除文件夹<br><br>&ensp;&ensp;cp  文件名1  文件名2    - 将文件1中的内容拷贝到文件2中<br><br>&ensp;&ensp;cp -r  文件名/目录名   目录2    - 将文件/目录拷贝到目录2中<br><br>&ensp;&ensp;mv    文件名1  文件名2    - 将文件1中的内容移动到文件2中 ,并且删除文件1（文件重命名）<br><br>&ensp;&ensp;mv    文件名1  文件目录    - 将文件1移动到指定目录中<br>&ensp;&ensp;注意: mv指令不能加-r来操作目录<br><br>&ensp;&ensp;(注意：cp/mv/rm 后面可以跟： -i询问  -f强制  -n不覆盖)<br><br>&ensp;&ensp;mkdir  目录名        - 新建文件夹<br><br>&ensp;&ensp;mkdir -p a/b/c        - 按层级创建a,b,c三个文件夹<br><br>&ensp;&ensp;mkdir -p a/{b,c}/{d,e,f}    -同一层级常见多个<br><br>&ensp;&ensp;rmdir  目录名        - 删除指定空目录<br></p><p>5.history(显示历史指令记录)<br><br>&ensp;&ensp;bashrc 配置显示时间：export  HISTTIMEFORMAT=”[%y‐%m‐%d_%T] “ <br><br>&ensp;&ensp;修改bashrc 后使其生效:  source ~/.bashrc  或 .  .bashrc   </p><p>6.链接<br><br>&ensp;&ensp;ln -s 源路径  目标路径        - 给源路径对应的文件在目标路径下创建一个软链接(可以看成是快捷键)(源路径是绝对路径) (掌握！)<br><br>&ensp;&ensp;ln 源路径  目标路径            - 给源路径对应的文件在目标路径下创建一个硬链接（了解）<br>注意: 源文件不存在的时候，软件无效，硬链接变成普通文件</p><p>7.快捷键<br><br>ctr + f         - 前进一个字符<br><br>ctr + b        - 后退一个字符<br><br>ctr + a        - 回到行首<br><br>ctr + e         - 回到行尾<br><br>ctr + w        - 向左删除一个单词<br><br>ctr + u        - 向左删除全部<br><br>ctr + k        - 向右删除全部<br><br>ctr + y        - 粘贴上次删除的内容<br><br>ctr + l        - 清屏  </p><h2 id="二、进程相关指令-用得较少"><a href="#二、进程相关指令-用得较少" class="headerlink" title="二、进程相关指令(用得较少)"></a>二、进程相关指令(用得较少)</h2><p>1.ps指令<br><br>ps                        - 进程状态<br><br>ps -aux  或者  ps ex            - 查看进程<br><br>ps -aux|grep 进程名        - 查看指定进程<br><br>ps grep  进程ID<br></p><p>2.top指令<br><br>top                         - 动态监控进程<br><br>top  -p PID1,PID2,….        - 动态监控指定进程<br></p><p>3.free指令<br><br>free -单位                    - 以指定单位查看内存, 例如 free -m (以Mb为单位显示内存状况), -g,  -k等！</p><p>4.kill指令<br>kill 进程号                    - 杀死指定的进程<br><br>kill -1/-9/-15                - -1(HUP)不间断重启，-9(KILL)强制杀死进程,-15(TERM)正常终止进程  <br><br>pkill  进程名                - 按名字处理进程<br><br>killall 进程名                - 处理名字匹配的进程<br><br>uptime                    - 查看系统状态</p><h2 id="三、权限管理"><a href="#三、权限管理" class="headerlink" title="三、权限管理"></a>三、权限管理</h2><p>1.user和group : 一个系统可以有多个用户和多个分组； 一个分组中可以有多个用户，一个用户在不同的分组中(多对多)<br>users                                     - 查看当前用户<br><br>groups                                 - 查看当前分组<br><br>groupadd  分组名                            - 添加分组<br><br>useradd ‐G 分组列表 ‐m ‐s /bin/bash 用户名        - 创建一个用户添加到指定的分组中(在home创建相应的文件夹)<br><br>usermod -G 分组列表 用户名                    - 修改分组<br><br>passwd 用户名                            - 修改密码<br><br>su  用户名                                - 切换用户身份<br><br>sudo                                        - 以管理员执行其他程序<br><br>注意： a.在ubuntu需要将用户添加到sudo分组中，才能使用sudo以管理员的身份执行程序<br>b.在centOS中需要先执行vi 指令进入sudoers文件中在指定的位置添加内容</p><pre><code>    ## Allow root to run any commands anywhere    root    ALL=(ALL)       ALL    xiaoming ALL=(ALL)      ALL        (自己添加的，xiaoming是用户名)</code></pre><p>2.chmod<br><br>chmod       权限值   文件            - 修改指定文件的权限<br></p><p>chmod    [a,u,g,o][+,-][r,w,x]  文件            - 为指定文件，给所有用户添加相应的权限<br><br>(a:所有，u:自己，g:同组，o:其他)<br><br>(+：添加， -: 取消)<br><br>(r:读，w:写，x:执行)<br><br>chown  用户名     文件            - 改变文件所有者<br></p><p>(权限制是三组二进制值)</p><p>self&ensp;&ensp;group&ensp;&ensp;other<br><br>rwx &ensp;&ensp;&ensp;rwx&ensp;&ensp;&ensp; rwx<br><br>111&ensp;&ensp;&ensp;101&ensp;&ensp;&ensp;001            - 自己读写可执行，同一分组的只读可执行，其他的只可执行<br><br>110&ensp;&ensp;&ensp;100&ensp;&ensp;&ensp;000</p><p>chmod  644  文件<br><br>chmod  777   文件<br><br>chmod 666    文件<br></p><h2 id="四、日志管理"><a href="#四、日志管理" class="headerlink" title="四、日志管理"></a>四、日志管理</h2><p>1.cat指令<br><br>cat       文件                - 查看文件内容</p><p>2.查看部分<br><br>head -n  N  文件        - 查看前N行内容<br><br>tail  -n  N    文件         - 查看后N行内容<br></p><p>3.less [-N]  文件<br><br>&ensp;&ensp;&ensp;- 按 j 向下<br><br>&ensp;&ensp;&ensp;- 按 k 向上<br><br>&ensp;&ensp;&ensp;- 按 f 向下翻屏<br><br>&ensp;&ensp;&ensp;- 按    b 向上翻屏<br><br>&ensp;&ensp;&ensp;- 按 g 到全文开头<br><br>&ensp;&ensp;&ensp;- 按 G 到全文结尾<br><br>&ensp;&ensp;&ensp;- 按 Q 退出  </p><p>more [-N]  文件            - 和less差不多，这个是尽可能多，less是尽可能少的加载</p><p>4.处理<br><br>sort                  - 排序  (cat 文件 |sort)<br><br>uniq                - 去重  (cat 文件 |uniq) - 命令用于检查及删除文本文件中重复出现的行列，一般与 sort 命令结合使用  |sort|uniq<br><br>awk ‘{print $N}’    - 打印第N列的内容(netstat -natp|awk ‘{print $4}’)<br><br>history |awk ‘{print $4}’ |sort |uniq ‐c | sort ‐rnk 1 | head ‐n 3           -获取历史指令中，使用最频繁的三个指令<br><br>5.重定向<br><br>执行获取数据的指令  &gt; 文件  （将执行指定的结果存储到文件中 - 覆盖原文件中内容）<br><br>执行获取数据的指令 &gt;&gt; 文件   (将执行指定的结果存储到文件中 - 在原文件的最后追加)<br></p><p>6.统计<br>wc -c(字符)/-w(单词)/-l(行)  文件</p><p>7.查找<br>grep  查看对象    目录/文件  参数<br><br>参数：<br><br>&ensp;&ensp;&ensp;-i    忽略大小写:         grep you bb.txt   -i<br><br>&ensp;&ensp;&ensp;-n   显示行标号：      grep you bb.txt -n   /   grep you bb.txt -i -n<br><br>&ensp;&ensp;&ensp;-E   通过正则表达式匹配:     grep -E  ‘正则表达式’  文件<br><br>&ensp;&ensp;&ensp;注意： Linux中，正则不支持: \d, \s,\w,\b,\D,\S,\W,\B<br>支持：.   +, *, ?, {N,M}, [], ^, $<br><br>&ensp;&ensp;&ensp;-v   忽略字段:   grep you bb.txt -v  (在bb.txt中找不包含you的所有行)<br><br><code>grep -E &#39;[0-9]+\.[0-9]+&#39; abb.txt -v</code></p><p>&ensp;&ensp;&ensp;-rn  递归查找目录，并打印行号<br><br>&ensp;&ensp;&ensp;grep -r  you ./   (在当前文件夹下中所有文件中去找包行’you’的行)<br><br>&ensp;&ensp;&ensp;—include=‘<em>.py’    仅包含 py文件: grep -r you ./ –include=’</em>.txt’<br><br>&ensp;&ensp;&ensp;—exclude=‘<em>.js’    不包含 js 文件: grep -r you ./ –exclude=’</em>.c’<br></p><p>例如：<br><br>    <code>grep you bb.txt</code> <br><br>    <code>grep you bb.txt -i</code><br><br>    <code>grep you bb.txt -i -n</code><br><br>    <code>grep -E &#39;[0-9]+&#39; bb.txt</code><br></p><p>find       DIR    -name  ‘<em>.xxx’        找到目录下所有名字匹配的文件:  find a1 -name ‘</em>.txt’(在文件夹a1中找所有txt文件)</p><pre><code>例：find ./ -size +20k -size -100k -name &#39;*.txt&#39;   (找当前目录下大于20k并且小于100k的所有txt文件)</code></pre><p>which  指令        - 精确查找当前可执行的指令<br><br>whereis  指令    - 查找所有匹配的命令</p><h2 id="五、网络管理"><a href="#五、网络管理" class="headerlink" title="五、网络管理"></a>五、网络管理</h2><p>ifconfig     查看网卡状态<br><br>netstat   -natp                    - 查看网络连接状态<br><br>netstat   -natp|grep  端口号            - 查看指定端口的网络连接状态<br><br>ping  地址 <br><br>ping  -i   时间    地址<br><br>ping  -c  次数    地址<br><br>telnet  ip地址    端口         - 查看远程主机网络连接状况<br><br>dig 地址            - 查看DNS<br><br>wget  地址            - 下载 <br> </p><h2 id="六、使用包管理工具"><a href="#六、使用包管理工具" class="headerlink" title="六、使用包管理工具"></a>六、使用包管理工具</h2><p>包管理工具：yum <br></p><ul><li>yum search：搜索软件包，例如yum search nginx。<br></li><li>yum list installed：列出已经安装的软件包，例如yum list installed | grep zlib。<br></li><li>yum install：安装软件包，例如yum install nginx。<br></li><li>yum remove：删除软件包，例如yum remove nginx。<br></li><li>yum update：更新软件包，例如yum update可以更新所有软件包，而yum update tar只会更新tar。<br></li><li>yum check-update：检查有哪些可以更新的软件包。<br></li><li>yum info：显示软件包的相关信息，例如yum info nginx。<br><br>源代码构建安装<br></li></ul><ol><li>wget  安装包的路径        -下载安装包<br></li><li>gunzip/tar  压缩包         - 解压、解归档<br></li><li>(设置安装路径)<br></li><li>cd 安装包目录 执行: make &amp;&amp; make install       -编译安装包程序<br></li><li>给可执行文件添加软连接到usr/bin目录下            -添加快捷方式<br><br>压缩/解压缩和归档/解归档 - gzip / gunzip / xz / tar</li></ol>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux指令 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2019/02/18/hello-world/"/>
      <url>/2019/02/18/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> IT </category>
          
      </categories>
      
      
        <tags>
            
            <tag> helloWord </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
